local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/memejames/elerium-v2-ui-library/main/Library", true))()
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local player = Players.LocalPlayer

local window = library:AddWindow("Sherya Script", {
    main_color = Color3.fromRGB(200, 0, 255),
    min_size = Vector2.new(660, 660),
    can_resize = false,
})

local maintab = window:AddTab("Main")
local gymtab = window:AddTab("Gyms")
local misctab = window:AddTab("Misc")
local eggtab = window:AddTab("Eggs")
local paidtab = window:AddTab("Paid")
local Killing = window:AddTab("Killer")
local playertab = window:AddTab("Players")
local teleporttab = window:AddTab("Teleport")
local calculatortab = window:AddTab("Calculator")
local credittab = window:AddTab("Credits")

local BrawlFolder = maintab:AddFolder("  Auto Brawl")

local godModeToggle = false
BrawlFolder:AddSwitch("God Mode (Brawl)", function(State)
    godModeToggle = State
    if State then
        task.spawn(function()
            while godModeToggle do
                game:GetService("ReplicatedStorage").rEvents.brawlEvent:FireServer("joinBrawl")
                task.wait(0)
            end
        end)
    end
end)

local autoJoinToggle = false
BrawlFolder:AddSwitch("Auto Join Brawl", function(State)
    autoJoinToggle = State
    if State then
        task.spawn(function()
            while autoJoinToggle do
                game:GetService("ReplicatedStorage").rEvents.brawlEvent:FireServer("joinBrawl")
                task.wait(2)
            end
        end)
    end
end)

local Players = game:GetService("Players")
local whitelist = {}

local autoWinBrawlSwitch = autoBrawlsFolder:AddSwitch("Auto Win Brawls", function(bool)
    getgenv().autoWinBrawl = bool

    -- Equipar Punch
    local function equipPunch()
        if not getgenv().autoWinBrawl then return end
        local character = Players.LocalPlayer.Character
        if not character then return false end

        if character:FindFirstChild("Punch") then
            return true
        end

        local backpack = Players.LocalPlayer.Backpack
        if not backpack then return false end

        for _, tool in pairs(backpack:GetChildren()) do
            if tool:IsA("Tool") and tool.Name == "Punch" then
                tool.Parent = character
                return true
            end
        end
        return false
    end

    -- Validar objetivo
    local function isValidTarget(player)
        if not player or not player.Parent then return false end
        if player == Players.LocalPlayer then return false end
        if whitelist[player.UserId] then return false end

        local character = player.Character
        if not character then return false end

        local humanoid = character:FindFirstChild("Humanoid")
        if not humanoid or humanoid.Health <= 0 or humanoid:GetState() == Enum.HumanoidStateType.Dead then
            return false
        end

        local rootPart = character:FindFirstChild("HumanoidRootPart")
        return rootPart ~= nil
    end

    -- Ver si el jugador local está listo
    local function isLocalPlayerReady()
        local player = Players.LocalPlayer
        if not player then return false end

        local character = player.Character
        if not character then return false end

        local humanoid = character:FindFirstChild("Humanoid")
        if not humanoid or humanoid.Health <= 0 then return false end

        return (character:FindFirstChild("LeftHand") or character:FindFirstChild("RightHand"))
    end

    -- Función segura para tocar jugadores
    local function safeTouchInterest(targetPart, localPart)
        if not targetPart or not localPart then return false end
        local success = pcall(function()
            firetouchinterest(targetPart, localPart, 0)
            task.wait(0.01)
            firetouchinterest(targetPart, localPart, 1)
        end)
        return success
    end

    -- Auto-Join cuando haya brawl disponible
    task.spawn(function()
        while getgenv().autoWinBrawl and task.wait(0.5) do
            if game.Players.LocalPlayer.PlayerGui.gameGui.brawlJoinLabel.Visible then
                game.ReplicatedStorage.rEvents.brawlEvent:FireServer("joinBrawl")
                game.Players.LocalPlayer.PlayerGui.gameGui.brawlJoinLabel.Visible = false
            end
        end
    end)

    -- Mantener Punch equipado
    task.spawn(function()
        while getgenv().autoWinBrawl and task.wait(0.5) do
            equipPunch()
        end
    end)

    -- Pegar puñetazos
    task.spawn(function()
        while getgenv().autoWinBrawl and task.wait(0.1) do
            if isLocalPlayerReady() and game.ReplicatedStorage.brawlInProgress.Value then
                local player = Players.LocalPlayer
                pcall(function() player.muscleEvent:FireServer("punch", "rightHand") end)
                pcall(function() player.muscleEvent:FireServer("punch", "leftHand") end)
            end
        end
    end)

    -- Tocar físicamente a los oponentes
    task.spawn(function()
        while getgenv().autoWinBrawl and task.wait(0.05) do
            if isLocalPlayerReady() and game.ReplicatedStorage.brawlInProgress.Value then
                local character = Players.LocalPlayer.Character
                local leftHand = character:FindFirstChild("LeftHand")
                local rightHand = character:FindFirstChild("RightHand")

                for _, target in pairs(Players:GetPlayers()) do
                    if isValidTarget(target) then
                        local targetRoot = target.Character.HumanoidRootPart
                        if leftHand then safeTouchInterest(targetRoot, leftHand) end
                        if rightHand then safeTouchInterest(targetRoot, rightHand) end
                    end
                end
            end
        end
    end)

    -- Solución anti-bug de stuck
    task.spawn(function()
        local lastPlayerCount = 0
        local stuckCounter = 0
        while getgenv().autoWinBrawl and task.wait(1) do
            local currentCount = #Players:GetPlayers()
            if currentCount ~= lastPlayerCount then
                stuckCounter = 0
                lastPlayerCount = currentCount
            else
                stuckCounter = 1
                if stuckCounter > 5 then
                    stuckCounter = 0
                    pcall(function()
                        local character = Players.LocalPlayer.Character
                        if character and character:FindFirstChild("Punch") then
                            character.Punch.Parent = Players.LocalPlayer.Backpack
                            task.wait(0.1)
                        end
                        equipPunch()
                    end)
                end
            end
        end
    end)
end)

local RockFolder = maintab:AddFolder("  Auto Rock")

local function gettool()
    for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
        if v.Name == "Punch" and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
        end
    end
    game:GetService("Players").LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
    game:GetService("Players").LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
end

local rockData = {
    ["Tiny Rock"] = 0,
    ["Starter Island"] = 100,
    ["Punching Rock"] = 1000,
    ["Golden Rock"] = 5000,
    ["Frost Rock"] = 150000,
    ["Mythical Rock"] = 400000,
    ["Eternal Rock"] = 750000,
    ["Legend Rock"] = 1000000,
    ["Muscle King Rock"] = 5000000,
    ["Jungle Rock"] = 10000000
}

local rockLocations = {
    "Tiny Rock", "Starter Island", "Punching Rock", "Golden Rock", 
    "Frost Rock", "Mythical Rock", "Eternal Rock", "Legend Rock",
    "Muscle King Rock", "Jungle Rock"
}

for _, rock in ipairs(rockLocations) do
    local rockSwitch = RockFolder:AddSwitch(rock, function(enabled)
        local requiredDurability = rockData[rock]
        getgenv().Main = enabled

        while getgenv().Main do
            task.wait()
            if game:GetService("Players").LocalPlayer.Durability.Value >= requiredDurability then
                for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
                    if v.Name == "neededDurability" and v.Value == requiredDurability and
                        game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and
                        game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then

                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
                        gettool()
                    end
                end
            end
        end
    end)
end

local Rebirth = maintab:AddFolder("  Auto Rebirths")

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer

local targetRebirths = 1
local autoRebirthRunning = false

Rebirth:AddTextbox("Target Rebirths", function(value)
    local n = tonumber(value)
    if n and n >= 1 then
        targetRebirths = n
    else
        targetRebirths = 1
    end
end, {
    ["clear"] = false,
    ["placeholder"] = "Enter target rebirths"
})

Rebirth:AddSwitch("Auto Rebirth (Target)", function(state)
    autoRebirthRunning = state

    if state then
        task.spawn(function()
            local leaderstats = LocalPlayer:WaitForChild("leaderstats")
            local rebirths = leaderstats and leaderstats:WaitForChild("Rebirths")
            local events = ReplicatedStorage:WaitForChild("rEvents")
            local remote = events and events:WaitForChild("rebirthRemote")

            if not (rebirths and remote) then
                autoRebirthRunning = false
                return
            end

            while autoRebirthRunning do
                if rebirths.Value >= targetRebirths then
                    autoRebirthRunning = false
                    print("Target rebirths reached! Stopping auto rebirth.")
                    break
                end

                local success, errorMessage = pcall(function()
                    remote:InvokeServer("rebirthRequest")
                end)

                if not success then
                    warn("Failed to send rebirth request: " .. tostring(errorMessage))
                end

                task.wait(1)
            end
        end)
    end
end)

local autoRebirth = false

local switch = Rebirth:AddSwitch("Auto Rebirth (infinite)", function(state)
    autoRebirth = state
    while autoRebirth do
        game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("rebirthRemote"):InvokeServer("rebirthRequest")
        task.wait(0.1)
    end
end)

local teleportLoop

local switch = Rebirth:AddSwitch("Auto Teleport King", function(state)
    if state then
        teleportLoop = task.spawn(function()
            while task.wait(0) do
                local player = game.Players.LocalPlayer
                if player.Character then
                    player.Character:MoveTo(Vector3.new(-8646, 17, -5738))
                end
            end
        end)
    else
        if teleportLoop then
            task.cancel(teleportLoop)
            teleportLoop = nil
        end
    end
end)

local autoSizeLoop = nil
local switch = Rebirth:AddSwitch("Auto Size 2", function(state)
    if state then
        autoSizeLoop = task.spawn(function()
            while task.wait(0) do
                game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", 2)
            end
        end)
    else
        if autoSizeLoop then
            task.cancel(autoSizeLoop)
            autoSizeLoop = nil
        end
    end
end)

local player = Players.LocalPlayer
local autoToggle = false

local function equipWeight()
    local character = player.Character
    if not character then
        warn("Auto Equip - No character found!")
        return false
    end

    local equippedWeight = character:FindFirstChild("Weight")
    if equippedWeight then
        print("Auto Equip - Weight already equipped!")
        return true
    end

    local weightTool = player.Backpack:FindFirstChild("Weight")
    if not weightTool then
        warn("Auto Equip - Weight not found in Backpack!")
        return false
    end

    weightTool.Parent = character
    task.wait(0.1)
    if character:FindFirstChild("Weight") then
        print("Auto Equip - Equipped Weight!")
        return true
    else
        warn("Auto Equip - Failed to equip Weight!")
        return false
    end
end

Rebirth:AddSwitch("Auto Weight", function(State)
    autoToggle = State
    print("Auto Lift & Equip toggle: " .. (State and "ON" or "OFF"))
    if State then
        task.spawn(function()
            print("Auto Lift & Equip starting...")
            while autoToggle do
                local character = player.Character
                if not character then
                    print("Auto Lift & Equip - Waiting for character...")
                    character = player.CharacterAdded:Wait()
                end

                if not character:FindFirstChild("Weight") then
                    equipWeight()
                end

                local muscleEvent = player:WaitForChild("muscleEvent", 5)
                if not muscleEvent then
                    warn("Auto Lift & Equip - muscleEvent not found! Stopping.")
                    autoToggle = false
                    break
                end

                local success, result = pcall(function()
                    return muscleEvent:FireServer("rep")
                end)
                if success then
                    if result then
                        print("Auto Lift & Equip - Rep successful!")
                    else
                        warn("Auto Lift & Equip - Rep failed: " .. tostring(result))
                    end
                else
                    warn("Auto Lift & Equip - Rep error: " .. tostring(result))
                end

                task.wait()
            end
            print("Auto Lift & Equip stopped")
        end)
    end
end)

player.CharacterAdded:Connect(function()
    if autoToggle then
        print("Character respawned - Auto equipping weight...")
        equipWeight()
    end
end)

