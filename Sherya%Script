local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/memejames/elerium-v2-ui-library/main/Library", true))()
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local player = Players.LocalPlayer

local window = library:AddWindow("Sherya Script", {
    main_color = Color3.fromRGB(200, 0, 255),
    min_size = Vector2.new(660, 660),
    can_resize = false,
})

local maintab = window:AddTab("Main")
local farmtab = window:AddTab("Farm")
local misctab = window:AddTab("Misc")
local eggtab = window:AddTab("Eggs")
local paidtab = window:AddTab("Paid")
local Killing = window:AddTab("Killer")
local playertab = window:AddTab("Players")
local teleporttab = window:AddTab("Teleport")
local calculatortab = window:AddTab("Calculator")
local credittab = window:AddTab("Credits")

local BrawlFolder = maintab:AddFolder("  Auto Brawl")

local godModeToggle = false
BrawlFolder:AddSwitch("God Mode (Brawl)", function(State)
    godModeToggle = State
    if State then
        task.spawn(function()
            while godModeToggle do
                game:GetService("ReplicatedStorage").rEvents.brawlEvent:FireServer("joinBrawl")
                task.wait(0)
            end
        end)
    end
end)

local autoJoinToggle = false
BrawlFolder:AddSwitch("Auto Join Brawl", function(State)
    autoJoinToggle = State
    if State then
        task.spawn(function()
            while autoJoinToggle do
                game:GetService("ReplicatedStorage").rEvents.brawlEvent:FireServer("joinBrawl")
                task.wait(2)
            end
        end)
    end
end)

local RockFolder = maintab:AddFolder("  Auto Rock")

local function gettool()
    for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
        if v.Name == "Punch" and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
        end
    end
    game:GetService("Players").LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
    game:GetService("Players").LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
end

local rockData = {
    ["Tiny Rock"] = 0,
    ["Starter Island"] = 100,
    ["Punching Rock"] = 1000,
    ["Golden Rock"] = 5000,
    ["Frost Rock"] = 150000,
    ["Mythical Rock"] = 400000,
    ["Eternal Rock"] = 750000,
    ["Legend Rock"] = 1000000,
    ["Muscle King Rock"] = 5000000,
    ["Jungle Rock"] = 10000000
}

local rockLocations = {
    "Tiny Rock", "Starter Island", "Punching Rock", "Golden Rock", 
    "Frost Rock", "Mythical Rock", "Eternal Rock", "Legend Rock",
    "Muscle King Rock", "Jungle Rock"
}

for _, rock in ipairs(rockLocations) do
    local rockSwitch = RockFolder:AddSwitch(rock, function(enabled)
        local requiredDurability = rockData[rock]
        getgenv().Main = enabled

        while getgenv().Main do
            task.wait()
            if game:GetService("Players").LocalPlayer.Durability.Value >= requiredDurability then
                for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
                    if v.Name == "neededDurability" and v.Value == requiredDurability and
                        game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and
                        game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then

                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
                        gettool()
                    end
                end
            end
        end
    end)
end

local Rebirth = maintab:AddFolder("  Auto Rebirths")

local RB = {}
RB.__index = RB

function RB.new(tab)
    local self = setmetatable({}, RB)
    self.on = false
    self.target = 1
    self.tab = tab
    self:ui()
    return self
end

function RB:ui()
    self.input = self.tab:AddTextBox("Target", function(v)
        local n = tonumber(v)
        if n and n >= 1 then
            self.target = n
        else
            self.input:Set("")
        end
    end, { placeholder = "Enter target rebirths" })

    self.tab:AddSwitch("Auto Rebirth(Target)", function(s)
        self.on = s
        if s then
            self:run()
        end
    end)
end

function RB:run()
    task.spawn(function()
        local leaderstats = LocalPlayer:WaitForChild("leaderstats")
        local rebirths = leaderstats and leaderstats:WaitForChild("Rebirths")
        local events = ReplicatedStorage:WaitForChild("rEvents")
        local remote = events and events:WaitForChild("rebirthRemote")

        if not (rebirths and remote) then
            self.on = false
            return
        end

        while self.on do
            if rebirths.Value >= self.target then
                self.on = false
                print("Target rebirths reached! Stopping auto rebirth.")
                break
            end

            local success, errorMessage = pcall(function()
                remote:InvokeServer("rebirthRequest")
            end)

            if not success then
                warn("Failed to send rebirth request: " .. tostring(errorMessage))
            end

            task.wait(1)
        end
    end)
end

local myRebirth = RB.new(Rebirth)

local autoRebirth = false
local switch = Rebirth:AddSwitch("Auto Rebirth (infinite)", function(state)
    autoRebirth = state
    while autoRebirth do
        game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("rebirthRemote"):InvokeServer("rebirthRequest")
        task.wait(0.1)
    end
end)

local autoSizeLoop = nil
local switch = Rebirth:AddSwitch("Auto Size 2", function(state)
    if state then
        autoSizeLoop = task.spawn(function()
            while task.wait(0) do
                game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", 2)
            end
        end)
    else
        if autoSizeLoop then
            task.cancel(autoSizeLoop)
            autoSizeLoop = nil
        end
    end
end)

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local autoToggle = false

local function equipWeight()
    local character = player.Character
    if not character then
        warn("Auto Equip - No character found!")
        return false
    end

    local equippedWeight = character:FindFirstChild("Weight")
    if equippedWeight then
        print("Auto Equip - Weight already equipped!")
        return true
    end

    local weightTool = player.Backpack:FindFirstChild("Weight")
    if not weightTool then
        warn("Auto Equip - Weight not found in Backpack!")
        return false
    end

    weightTool.Parent = character
    task.wait(0.1)
    if character:FindFirstChild("Weight") then
        print("Auto Equip - Equipped Weight!")
        return true
    else
        warn("Auto Equip - Failed to equip Weight!")
        return false
    end
end

Rebirth:AddSwitch("Auto Weight", function(State)
    autoToggle = State
    print("Auto Lift & Equip toggle: " .. (State and "ON" or "OFF"))
    if State then
        task.spawn(function()
            print("Auto Lift & Equip starting...")
            while autoToggle do
                local character = player.Character
                if not character then
                    print("Auto Lift & Equip - Waiting for character...")
                    character = player.CharacterAdded:Wait()
                end

                if not character:FindFirstChild("Weight") then
                    equipWeight()
                end

                local muscleEvent = player:WaitForChild("muscleEvent", 5)
                if not muscleEvent then
                    warn("Auto Lift & Equip - muscleEvent not found! Stopping.")
                    autoToggle = false
                    break
                end

                local success, result = pcall(function()
                    return muscleEvent:FireServer("rep")
                end)
                if success then
                    if result then
                        print("Auto Lift & Equip - Rep successful!")
                    else
                        warn("Auto Lift & Equip - Rep failed: " .. tostring(result))
                    end
                else
                    warn("Auto Lift & Equip - Rep error: " .. tostring(result))
                end

                task.wait()
            end
            print("Auto Lift & Equip stopped")
        end)
    end
end)

player.CharacterAdded:Connect(function()
    if autoToggle then
        print("Character respawned - Auto equipping weight...")
        equipWeight()
    end
end)
